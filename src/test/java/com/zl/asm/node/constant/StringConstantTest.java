package com.zl.asm.node.constant;

import com.zl.asm.ByteContainer;
import com.zl.asm.node.ConstantKind;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class StringConstantTest {

    static byte[] bytes = new byte[]{0, 66};

    static byte[] nodeBytes = new byte[]{0, 108, 10, 0, 23, 0, 62, 9, 0, 22, 0, 63, 9, 0, 22, 0, 64, 9, 0, 22, 0, 65, 8, 0, 66, 9, 0, 22, 0, 67, 10, 0, 23, 0, 68, 10, 0, 69, 0, 70, 8, 0, 71, 10, 0, 72, 0, 73, 7, 0, 74, 7, 0, 75, 10, 0, 58, 0, 76, 10, 0, 12, 0, 77, 10, 0, 11, 0, 78, 10, 0, 11, 0, 79, 10, 0, 11, 0, 80, 7, 0, 81, 10, 0, 18, 0, 82, 7, 0, 83, 10, 0, 20, 0, 84, 7, 0, 85, 7, 0, 86, 7, 0, 87, 7, 0, 88, 1, 0, 6, 105, 110, 116, 118, 97, 108, 1, 0, 1, 73, 1, 0, 13, 67, 111, 110, 115, 116, 97, 110, 116, 86, 97, 108, 117, 101, 3, 0, 0, 0, 10, 1, 0, 7, 105, 110, 116, 118, 97, 108, 50, 1, 0, 2, 102, 102, 1, 0, 1, 70, 4, 63, -128, 0, 0, 1, 0, 2, 100, 100, 1, 0, 1, 68, 6, 63, -16, 0, 0, 0, 0, 0, 0, 1, 0, 3, 115, 116, 114, 1, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 6, 60, 105, 110, 105, 116, 62, 1, 0, 3, 40, 41, 86, 1, 0, 4, 67, 111, 100, 101, 1, 0, 15, 76, 105, 110, 101, 78, 117, 109, 98, 101, 114, 84, 97, 98, 108, 101, 1, 0, 18, 76, 111, 99, 97, 108, 86, 97, 114, 105, 97, 98, 108, 101, 84, 97, 98, 108, 101, 1, 0, 4, 116, 104, 105, 115, 1, 0, 19, 76, 99, 111, 109, 47, 122, 108, 47, 72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 59, 1, 0, 4, 116, 101, 115, 116, 1, 0, 15, 102, 105, 108, 101, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 1, 0, 25, 76, 106, 97, 118, 97, 47, 105, 111, 47, 70, 105, 108, 101, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 59, 1, 0, 1, 101, 1, 0, 21, 76, 106, 97, 118, 97, 47, 105, 111, 47, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 59, 1, 0, 1, 97, 1, 0, 1, 98, 1, 0, 1, 99, 1, 0, 8, 114, 101, 115, 111, 117, 114, 99, 101, 1, 0, 14, 76, 106, 97, 118, 97, 47, 110, 101, 116, 47, 85, 82, 76, 59, 1, 0, 13, 83, 116, 97, 99, 107, 77, 97, 112, 84, 97, 98, 108, 101, 7, 0, 89, 1, 0, 10, 69, 120, 99, 101, 112, 116, 105, 111, 110, 115, 1, 0, 10, 83, 111, 117, 114, 99, 101, 70, 105, 108, 101, 1, 0, 15, 72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 46, 106, 97, 118, 97, 12, 0, 40, 0, 41, 12, 0, 30, 0, 27, 12, 0, 31, 0, 32, 12, 0, 34, 0, 35, 1, 0, 1, 115, 12, 0, 38, 0, 39, 12, 0, 90, 0, 91, 7, 0, 92, 12, 0, 93, 0, 94, 1, 0, 2, 46, 47, 7, 0, 95, 12, 0, 96, 0, 97, 1, 0, 23, 106, 97, 118, 97, 47, 105, 111, 47, 70, 105, 108, 101, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109, 1, 0, 12, 106, 97, 118, 97, 47, 105, 111, 47, 70, 105, 108, 101, 12, 0, 98, 0, 99, 12, 0, 40, 0, 100, 12, 0, 40, 0, 101, 12, 0, 102, 0, 103, 12, 0, 104, 0, 41, 1, 0, 19, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 12, 0, 105, 0, 106, 1, 0, 19, 106, 97, 118, 97, 47, 105, 111, 47, 73, 79, 69, 120, 99, 101, 112, 116, 105, 111, 110, 12, 0, 107, 0, 41, 1, 0, 17, 99, 111, 109, 47, 122, 108, 47, 72, 101, 108, 108, 111, 87, 111, 114, 108, 100, 1, 0, 16, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 1, 0, 19, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 111, 110, 101, 97, 98, 108, 101, 1, 0, 13, 99, 111, 109, 47, 122, 108, 47, 84, 101, 115, 116, 73, 110, 1, 0, 12, 106, 97, 118, 97, 47, 110, 101, 116, 47, 85, 82, 76, 1, 0, 8, 103, 101, 116, 67, 108, 97, 115, 115, 1, 0, 19, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 59, 1, 0, 15, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 1, 0, 14, 103, 101, 116, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 1, 0, 25, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 59, 1, 0, 21, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 67, 108, 97, 115, 115, 76, 111, 97, 100, 101, 114, 1, 0, 11, 103, 101, 116, 82, 101, 115, 111, 117, 114, 99, 101, 1, 0, 34, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 76, 106, 97, 118, 97, 47, 110, 101, 116, 47, 85, 82, 76, 59, 1, 0, 7, 103, 101, 116, 80, 97, 116, 104, 1, 0, 20, 40, 41, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 1, 0, 21, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 41, 86, 1, 0, 17, 40, 76, 106, 97, 118, 97, 47, 105, 111, 47, 70, 105, 108, 101, 59, 41, 86, 1, 0, 12, 114, 101, 97, 100, 65, 108, 108, 66, 121, 116, 101, 115, 1, 0, 4, 40, 41, 91, 66, 1, 0, 5, 99, 108, 111, 115, 101, 1, 0, 13, 97, 100, 100, 83, 117, 112, 112, 114, 101, 115, 115, 101, 100, 1, 0, 24, 40, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 84, 104, 114, 111, 119, 97, 98, 108, 101, 59, 41, 86, 1, 0, 15, 112, 114, 105, 110, 116, 83, 116, 97, 99, 107, 84, 114, 97, 99, 101};

    static ByteContainer bc;
    static StringConstant stringConstant;

    static ConstantPoolNode poolNode;

    @BeforeAll
    public static void init() {
        bc = new ByteContainer(bytes);
        poolNode = new ConstantPoolNode(new ByteContainer(nodeBytes));
        stringConstant = new StringConstant(bc, poolNode, ConstantKind.CONSTANT_String, 1);

    }

    @Test
    public void test() {
        int stringIndex = stringConstant.getStringIndex();
        assertEquals(66, stringIndex);
    }

    @Test
    public void getLog() {
        StringBuilder builder = new StringBuilder();
        stringConstant.getLog(builder);
        System.out.println(builder);
        System.out.println("end");
    }

    @Test
    public void getValue() {
        String value = stringConstant.getValue();
        assertEquals("s", value);
    }
}